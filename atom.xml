<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quantum Field</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lianghan.org/"/>
  <updated>2016-08-14T04:54:47.000Z</updated>
  <id>http://lianghan.org/</id>
  
  <author>
    <name>hanm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>USACO 1.3 Combation Lock</title>
    <link href="http://lianghan.org/2016/08/13/2016-08-13-USACO-CombinationLock/"/>
    <id>http://lianghan.org/2016/08/13/2016-08-13-USACO-CombinationLock/</id>
    <published>2016-08-14T04:52:31.000Z</published>
    <updated>2016-08-14T04:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Reduce to a search problem, pay attion to the search space. Code can be further optimized.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">wrap</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> num + N;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (num &gt; N) &#123;</div><div class="line">        <span class="keyword">return</span> num - N;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getCandidate(<span class="keyword">int</span> num, <span class="keyword">int</span> N) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">    <span class="keyword">int</span> range;</div><div class="line">    <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</div><div class="line">        range = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">2</span>) &#123;</div><div class="line">        range = <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        range = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; -range &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = -range; i &lt;= range; ++i) &#123;</div><div class="line">        ret.emplace_back(wrap(num + i, N));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"combo.in"</span>)</span></span>;</div><div class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"combo.out"</span>)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lock(<span class="number">3</span>, <span class="number">0</span>), master(<span class="number">3</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a, b;</div><div class="line">    fin &gt;&gt; N;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</div><div class="line">        fin &gt;&gt; lock[i];</div><div class="line">        a.emplace_back(getCandidate(lock[i], N));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</div><div class="line">        fin &gt;&gt; master[i];</div><div class="line">        b.emplace_back(getCandidate(master[i], N));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">set</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; s;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">0</span>].size(); ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[<span class="number">1</span>].size(); ++j) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; a[<span class="number">2</span>].size(); ++k) &#123;</div><div class="line">                s.insert(make_tuple(a[<span class="number">0</span>][i], a[<span class="number">1</span>][j], a[<span class="number">2</span>][k]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b[<span class="number">0</span>].size(); ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b[<span class="number">1</span>].size(); ++j) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">2</span>].size(); ++k) &#123;</div><div class="line">                s.insert(make_tuple(b[<span class="number">0</span>][i], b[<span class="number">1</span>][j], b[<span class="number">2</span>][k]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fout &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;item : s) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; get&lt;<span class="number">0</span>&gt;(item) &lt;&lt; <span class="string">","</span></div><div class="line">        &lt;&lt; get&lt;<span class="number">1</span>&gt;(item) &lt;&lt; <span class="string">","</span></div><div class="line">        &lt;&lt; get&lt;<span class="number">2</span>&gt;(item) &lt;&lt; <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reduce to a search problem, pay attion to the search space. Code can be further optimized.&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="Combination" scheme="http://lianghan.org/tags/Combination/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Dual Palindrome</title>
    <link href="http://lianghan.org/2016/08/11/2016-08-11-USACO-DualPalindrome/"/>
    <id>http://lianghan.org/2016/08/11/2016-08-11-USACO-DualPalindrome/</id>
    <published>2016-08-12T04:48:31.000Z</published>
    <updated>2016-08-12T04:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Another implementation skill test for base conversion.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = str.size() - <span class="number">1</span>; i &lt; j; ++i, --j) &#123;</div><div class="line">    <span class="keyword">if</span> (str[i] != str[j]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">getNumber</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> BASE)</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> str;</div><div class="line">  <span class="keyword">int</span> base = BASE;</div><div class="line">  <span class="keyword">while</span> (number) &#123;</div><div class="line">    <span class="keyword">int</span> digit = number % base;</div><div class="line">    <span class="keyword">int</span> factor = base / BASE;</div><div class="line">    digit /= factor;</div><div class="line">    str.push_back(digit + <span class="string">'0'</span>);</div><div class="line">    number -= digit * factor;</div><div class="line">    base *= BASE;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"dualpal.in"</span>)</span></span>;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"dualpal.out"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> N, S;</div><div class="line">  fin &gt;&gt; N &gt;&gt; S;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = S + <span class="number">1</span>, j = <span class="number">0</span>; j &lt; N;) &#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= <span class="number">10</span>; ++k) &#123;</div><div class="line">      <span class="keyword">if</span> (j &gt; N) <span class="keyword">break</span>;</div><div class="line">      <span class="built_in">string</span> num = getNumber(i, k);</div><div class="line">      <span class="keyword">if</span> (isPalindrome(num)) &#123;</div><div class="line">        ++count;</div><div class="line">        <span class="keyword">if</span> (count == <span class="number">2</span>) &#123;</div><div class="line">          fout &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">          ++j; ++i;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (count != <span class="number">2</span>) ++i;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Another implementation skill test for base conversion.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="Base Conversion" scheme="http://lianghan.org/tags/Base-Conversion/"/>
    
  </entry>
  
  <entry>
    <title>TopCoder SRM 696</title>
    <link href="http://lianghan.org/2016/08/10/2016-08-09-TopCoderSRM696/"/>
    <id>http://lianghan.org/2016/08/10/2016-08-09-TopCoderSRM696/</id>
    <published>2016-08-11T04:13:31.000Z</published>
    <updated>2016-08-11T04:20:53.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><figcaption><span>250_Rope_String</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">class</span> Ropestring &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">makerope</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; even, odd;</div><div class="line">        <span class="keyword">int</span> size = (<span class="keyword">int</span>)s.size();</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'-'</span>)</div><div class="line">                ++cur;</div><div class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'.'</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">'-'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (cur % <span class="number">2</span>) &#123;</div><div class="line">                        odd.push_back(cur);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        even.push_back(cur);</div><div class="line">                    &#125;</div><div class="line">                    cur = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s[size - <span class="number">1</span>] == <span class="string">'-'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (cur % <span class="number">2</span>) &#123;</div><div class="line">                odd.push_back(cur);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                even.push_back(cur);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(odd.begin(), odd.end());</div><div class="line">        sort(even.begin(), even.end());</div><div class="line">        <span class="built_in">string</span> ret;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)even.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="keyword">int</span> size = even[i];</div><div class="line">            <span class="keyword">while</span> (size) &#123;</div><div class="line">                ret.push_back(<span class="string">'-'</span>);</div><div class="line">                ++count;</div><div class="line">                --size;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</div><div class="line">                ret.push_back(<span class="string">'.'</span>); ++count;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!even.empty() &amp;&amp; !odd.empty()) &#123;</div><div class="line">            ret.push_back(<span class="string">'.'</span>); ++count;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)(odd.size() - <span class="number">1</span>); i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="keyword">int</span> size = odd[i];</div><div class="line">            <span class="keyword">while</span> (size) &#123;</div><div class="line">                ret.push_back(<span class="string">'-'</span>);</div><div class="line">                ++count;</div><div class="line">                --size;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</div><div class="line">                ret.push_back(<span class="string">'.'</span>); ++count;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> left = (<span class="keyword">int</span>)s.size() - count;</div><div class="line">        <span class="keyword">while</span> (left) &#123;</div><div class="line">            ret.push_back(<span class="string">'.'</span>); --left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>500_Array_Fix</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">class</span> Arrfix &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mindiff</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; B, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; F)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hashb;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hashf;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : B) &#123;</div><div class="line">            hashb[i]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : F) &#123;</div><div class="line">            hashf[i]++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> diff = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> size = (<span class="keyword">int</span>)A.size();</div><div class="line">        <span class="keyword">int</span> used = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (A[i] == B[i])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (hashf[B[i]]) &#123;</div><div class="line">                hashf[B[i]]--;</div><div class="line">                ++used;</div><div class="line">                hashb[B[i]]--;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            ++diff;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (used == (<span class="keyword">int</span>)F.size())</div><div class="line">            <span class="keyword">return</span> diff;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> iter = hashf.begin(); iter != hashf.end(); ++iter) &#123;</div><div class="line">            <span class="keyword">int</span> key = iter-&gt;first;</div><div class="line">            <span class="keyword">int</span> count = iter-&gt;second;</div><div class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (hashb[key]) &#123;</div><div class="line">                hashb[key]--;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ++diff;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> diff;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;250_Rope_String&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span 
    
    </summary>
    
      <category term="TopCoder" scheme="http://lianghan.org/categories/TopCoder/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Palindrome Square</title>
    <link href="http://lianghan.org/2016/08/09/2016-08-09-PalindromeSquare/"/>
    <id>http://lianghan.org/2016/08/09/2016-08-09-PalindromeSquare/</id>
    <published>2016-08-10T05:22:31.000Z</published>
    <updated>2016-08-10T05:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>This problem is very straightforward to solve, just pay attention to implementation details.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = str.size() - <span class="number">1</span>; i &lt; j; ++i, --j) &#123;</div><div class="line">    <span class="keyword">if</span> (str[i] != str[j]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">getNumber</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> BASE, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;table)</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> str;</div><div class="line">  <span class="keyword">int</span> base = BASE;</div><div class="line">  <span class="keyword">while</span> (number) &#123;</div><div class="line">    <span class="keyword">int</span> digit = number % base;</div><div class="line">    <span class="keyword">int</span> factor = base / BASE;</div><div class="line">    digit /= factor;</div><div class="line">    str.push_back(table[digit]);</div><div class="line">    number -= digit * factor;</div><div class="line">    base *= BASE;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reverse(str.begin(), str.end());</div><div class="line">  <span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; table = &#123; <span class="string">'0'</span> , <span class="string">'1'</span> , <span class="string">'2'</span> , <span class="string">'3'</span> , <span class="string">'4'</span> , <span class="string">'5'</span> , <span class="string">'6'</span> , <span class="string">'7'</span> , <span class="string">'8'</span> , <span class="string">'9'</span> ,</div><div class="line">    <span class="string">'A'</span> , <span class="string">'B'</span> , <span class="string">'C'</span> , <span class="string">'D'</span> , <span class="string">'E'</span> , <span class="string">'F'</span> , <span class="string">'G'</span> , <span class="string">'H'</span> , <span class="string">'I'</span> , <span class="string">'J'</span> &#125; ;</div><div class="line"></div><div class="line">  <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"palsquare.in"</span>)</span></span>;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"palsquare.out"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> BASE;</div><div class="line">  fin &gt;&gt; BASE;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">300</span>; ++i) &#123;</div><div class="line">    <span class="built_in">string</span> num = getNumber(i * i, BASE, table);</div><div class="line">    <span class="keyword">if</span> (isPalindrome(num)) &#123;</div><div class="line">      fout &lt;&lt; getNumber(i, BASE, table) &lt;&lt; <span class="string">" "</span>;</div><div class="line">      fout &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This problem is very straightforward to solve, just pay attention to implementation details.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="Search" scheme="http://lianghan.org/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Name That Number</title>
    <link href="http://lianghan.org/2016/08/08/2016-08-08-NameThatNumber/"/>
    <id>http://lianghan.org/2016/08/08/2016-08-08-NameThatNumber/</id>
    <published>2016-08-09T05:06:31.000Z</published>
    <updated>2016-08-10T05:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a search problem and the key is to figure out the search space. Given the input number, we can generate all possible combinations of the valid words and use these words as search space. The other approach is to generate all possible numbers from the input dictionary and then use these numbers as search space. Obviously, given the input constraints (a list of fewer than 5,000 acceptable cattle names), the number search space is more practical.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">name2number</span><span class="params">(<span class="built_in">string</span> name)</span></span>&#123;</div><div class="line">  <span class="keyword">char</span> c = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line">  <span class="built_in">ostringstream</span> buf;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> c : name)&#123;</div><div class="line">    <span class="keyword">if</span>(c &gt; <span class="string">'Q'</span>)</div><div class="line">      value = (c - <span class="number">1</span> - <span class="string">'A'</span>) / <span class="number">3</span> + <span class="number">2</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      value = (c - <span class="string">'A'</span>) / <span class="number">3</span> + <span class="number">2</span>;</div><div class="line"></div><div class="line">    buf &lt;&lt; value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> buf.str();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"namenum.out"</span>)</span></span>;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"namenum.in"</span>)</span></span>;</div><div class="line">  <span class="function">ifstream <span class="title">dict_fin</span><span class="params">(<span class="string">"dict.txt"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">string</span> value;</div><div class="line">  fin &gt;&gt; value;</div><div class="line"></div><div class="line">  <span class="built_in">string</span> name;</div><div class="line">  <span class="keyword">bool</span> not_found = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">while</span>(dict_fin &gt;&gt; name)&#123;</div><div class="line">    <span class="built_in">string</span> number = name2number(name);</div><div class="line">    <span class="keyword">if</span>(number != value)</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    fout &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    not_found = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(not_found)</div><div class="line">    fout&lt;&lt;<span class="string">"NONE"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  dict_fin.close();</div><div class="line">  fin.close();</div><div class="line">  fout.close();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a search problem and the key is to figure out the search space. Given the input number, we can generate all possible combinations
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="Search" scheme="http://lianghan.org/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Transformation</title>
    <link href="http://lianghan.org/2016/08/08/%202016-08-08-Transformation/"/>
    <id>http://lianghan.org/2016/08/08/ 2016-08-08-Transformation/</id>
    <published>2016-08-09T04:53:31.000Z</published>
    <updated>2016-08-09T05:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Brutal force search… and a Hexo bug that prevent syntax being highlighted!</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;fstream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">typedef vector&lt;vector&lt;char&gt; &gt; MATRIX;</div><div class="line"></div><div class="line">void rotateMatrix90(MATRIX &amp;matrix) &#123;</div><div class="line">  auto size = matrix.size();</div><div class="line">  for (int i = 0; i &lt; size; ++i) &#123;</div><div class="line">    for (int j = i + 1; j &lt; size; ++j) &#123;</div><div class="line">      swap(matrix[i][j], matrix[j][i]);</div><div class="line">    &#125;</div><div class="line">    reverse(matrix[i].begin(), matrix[i].end());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void rotateMatrix180(MATRIX &amp;matrix) &#123;</div><div class="line">  rotateMatrix90(matrix);</div><div class="line">  rotateMatrix90(matrix);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void rotateMatrix270(MATRIX &amp;matrix) &#123;</div><div class="line">  rotateMatrix90(matrix);</div><div class="line">  rotateMatrix180(matrix);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void reflectMatrixHorizontal(MATRIX &amp;matrix) &#123;</div><div class="line">  int size = static_cast&lt;int&gt;(matrix.size());</div><div class="line">  for (int i = 0, j = size - 1; i &lt; j; ++i, --j) &#123;</div><div class="line">    for (int k = 0; k &lt; size; ++k)</div><div class="line">      swap(matrix[k][i], matrix[k][j]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void initializeMatrix(MATRIX &amp;matrix, ifstream &amp;fin) &#123;</div><div class="line">  auto demension = matrix.size();</div><div class="line">  for (int i = 0; i &lt; demension; ++i) &#123;</div><div class="line">    for (int j = 0; j &lt; demension; ++j) &#123;</div><div class="line">      fin &gt;&gt; matrix[i][j];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main () &#123;</div><div class="line">  string str;</div><div class="line">  ifstream fin ("transform.in");</div><div class="line">  ofstream fout ("transform.out");</div><div class="line"></div><div class="line">  int demension;</div><div class="line">  fin &gt;&gt; demension;</div><div class="line">  MATRIX matrix(demension, vector&lt;char&gt;(demension, ' '));</div><div class="line">  initializeMatrix(matrix, fin);</div><div class="line"></div><div class="line">  MATRIX baseline(demension, vector&lt;char&gt;(demension, ' '));</div><div class="line">  initializeMatrix(baseline, fin);</div><div class="line"></div><div class="line">  MATRIX old = matrix;</div><div class="line"></div><div class="line">  rotateMatrix90(matrix);</div><div class="line">  if (baseline == matrix) &#123;</div><div class="line">    fout &lt;&lt; 1 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  matrix = old;</div><div class="line">  rotateMatrix180(matrix);</div><div class="line">  if (baseline == matrix) &#123;</div><div class="line">    fout &lt;&lt; 2 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  matrix = old;</div><div class="line">  rotateMatrix270(matrix);</div><div class="line">  if (baseline == matrix) &#123;</div><div class="line">    fout &lt;&lt; 3 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  matrix = old;</div><div class="line">  reflectMatrixHorizontal(matrix);</div><div class="line">  if (baseline == matrix) &#123;</div><div class="line">    fout &lt;&lt; 4 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  MATRIX reflected = matrix;</div><div class="line">  rotateMatrix90(matrix);</div><div class="line">  if (matrix == baseline) &#123;</div><div class="line">    fout &lt;&lt; 5 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  matrix = reflected;</div><div class="line">  rotateMatrix180(matrix);</div><div class="line">  if (matrix == baseline) &#123;</div><div class="line">    fout &lt;&lt; 5 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  matrix = reflected;</div><div class="line">  rotateMatrix270(matrix);</div><div class="line">  if (matrix == baseline) &#123;</div><div class="line">    fout &lt;&lt; 5 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  matrix = old;</div><div class="line">  if (matrix == baseline) &#123;</div><div class="line">    fout &lt;&lt; 6 &lt;&lt; std::endl;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fout &lt;&lt; 7 &lt;&lt; std::endl;</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Brutal force search… and a Hexo bug that prevent syntax being highlighted!&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="Search" scheme="http://lianghan.org/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Milking Cows</title>
    <link href="http://lianghan.org/2016/08/08/2016-08-08-MilkingCows/"/>
    <id>http://lianghan.org/2016/08/08/2016-08-08-MilkingCows/</id>
    <published>2016-08-09T04:31:31.000Z</published>
    <updated>2016-08-09T04:55:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Simple brutal force search with intervals.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Interval &#123;</div><div class="line">  <span class="keyword">int</span> start, end;</div><div class="line">  Interval(<span class="keyword">int</span> start, <span class="keyword">int</span> end) : start(start), end(end) &#123;&#125;</div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Interval&amp; interval) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> start &lt; interval.start;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> str;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span> <span class="params">(<span class="string">"milk2.in"</span>)</span></span>;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span> <span class="params">(<span class="string">"milk2.out"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">vector</span>&lt;Interval&gt; intervals;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> farmers;</div><div class="line">  fin &gt;&gt; farmers;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; farmers; ++i) &#123;</div><div class="line">    <span class="keyword">int</span> start, end;</div><div class="line">    fin &gt;&gt; start &gt;&gt; end;</div><div class="line">    intervals.emplace_back(Interval(start, end));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::sort(intervals.begin(), intervals.end());</div><div class="line"></div><div class="line">  <span class="keyword">int</span> maxOverlap = <span class="number">0</span>, maxGap = <span class="number">0</span>;</div><div class="line">  Interval it = intervals[<span class="number">0</span>];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.size(); ++i) &#123;</div><div class="line">    <span class="keyword">if</span> (intervals[i].start &gt; it.end) &#123;</div><div class="line">      <span class="comment">// none overlap</span></div><div class="line">      maxOverlap = <span class="built_in">std</span>::max(maxOverlap, it.end - it.start);</div><div class="line">      maxGap = <span class="built_in">std</span>::max(maxGap, intervals[i].start - it.end);</div><div class="line">      it = intervals[i];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      it.end = <span class="built_in">std</span>::max(it.end, intervals[i].end);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  maxOverlap = <span class="built_in">std</span>::max(maxOverlap, it.end - it.start);</div><div class="line"></div><div class="line">  fout &lt;&lt; maxOverlap &lt;&lt; <span class="string">" "</span> &lt;&lt; maxGap &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Simple brutal force search with intervals.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span cla
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="Search" scheme="http://lianghan.org/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.1 Broken Necklace</title>
    <link href="http://lianghan.org/2016/08/06/2016-08-06%EF%BC%8DUSACO-BrokenNecklace/"/>
    <id>http://lianghan.org/2016/08/06/2016-08-06－USACO-BrokenNecklace/</id>
    <published>2016-08-07T01:25:31.000Z</published>
    <updated>2016-08-07T01:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Brutal force O(N^2) solution.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">string</span> str;</div><div class="line">  <span class="keyword">int</span> n, i, l, r, mx = <span class="number">0</span>;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span> <span class="params">(<span class="string">"beads.in"</span>)</span></span>;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span> <span class="params">(<span class="string">"beads.out"</span>)</span></span>;</div><div class="line">  fin &gt;&gt; n;</div><div class="line">  fin &gt;&gt; str;</div><div class="line">  str += str;</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    l = r = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = i + <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> flag;</div><div class="line">    <span class="keyword">while</span>(l &lt; n) &#123;</div><div class="line">      <span class="keyword">int</span> j = i;</div><div class="line">      <span class="keyword">while</span>(str[j] == <span class="string">'w'</span>)</div><div class="line">        j++;</div><div class="line">      flag = str[j];</div><div class="line">      <span class="keyword">if</span> (str[k] == flag || str[k] == <span class="string">'w'</span>)</div><div class="line">        k++, l++;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    k = i + n - <span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(r &lt; n) &#123;</div><div class="line">      <span class="keyword">int</span> j = i;</div><div class="line">      <span class="keyword">while</span>(str[j] == <span class="string">'w'</span>)</div><div class="line">        j--;</div><div class="line">      <span class="keyword">if</span> (str[k] == str[i + n - <span class="number">1</span>] || str[k] == <span class="string">'w'</span>)</div><div class="line">        k--, r++;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (l + r &gt; mx) mx = l + r;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (mx &gt; n) mx = n;</div><div class="line">  fout &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Brutal force O(N^2) solution.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.1 Friday</title>
    <link href="http://lianghan.org/2016/08/06/2016-08-06-USACO-Friday/"/>
    <id>http://lianghan.org/2016/08/06/2016-08-06-USACO-Friday/</id>
    <published>2016-08-07T00:16:31.000Z</published>
    <updated>2016-08-07T00:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Straightforward brutal force implementation.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Checker &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">int</span> day, year, offset;</div><div class="line"></div><div class="line">  Checker() : day(<span class="number">1</span>), year(<span class="number">1900</span>), offset(<span class="number">1</span>) &#123;</div><div class="line">    frequentCounterList = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> , <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    month2days = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> month = <span class="number">1</span>; month &lt;= <span class="number">12</span>; ++month) &#123;</div><div class="line">        day = offset + <span class="number">12</span>;</div><div class="line">        frequentCounterList[day % <span class="number">7</span> + <span class="number">1</span>]++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (month == <span class="number">2</span>) &#123;</div><div class="line">          <span class="keyword">if</span> (isLeapYear(year))</div><div class="line">            offset += <span class="number">29</span>;</div><div class="line">          <span class="keyword">else</span></div><div class="line">            offset += <span class="number">28</span>;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">          offset += month2days[month];</div><div class="line">      &#125;</div><div class="line">      ++year;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getFrequency() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> frequentCounterList;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; frequentCounterList;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; month2days;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (year % <span class="number">100</span> == <span class="number">0</span>)</div><div class="line">      <span class="keyword">return</span> year % <span class="number">400</span> == <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span> <span class="params">(<span class="string">"friday.out"</span>)</span></span>;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span> <span class="params">(<span class="string">"friday.in"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">string</span> years;</div><div class="line">  getline(fin, years);</div><div class="line">  Checker checker;</div><div class="line">  checker.traverse(stoi(years));</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> <span class="built_in">list</span> = checker.getFrequency();</div><div class="line">  fout &lt;&lt; <span class="built_in">list</span>[<span class="number">7</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">list</span>[<span class="number">1</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt;</div><div class="line">  <span class="built_in">list</span>[<span class="number">2</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">list</span>[<span class="number">3</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">list</span>[<span class="number">4</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">list</span>[<span class="number">5</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt;</div><div class="line">  <span class="built_in">list</span>[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Straightforward brutal force implementation.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span c
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.1 Greedy Gift Givers</title>
    <link href="http://lianghan.org/2016/08/06/2016-08-06-USACO-Greedy-Gift-Givers/"/>
    <id>http://lianghan.org/2016/08/06/2016-08-06-USACO-Greedy-Gift-Givers/</id>
    <published>2016-08-06T22:04:31.000Z</published>
    <updated>2016-08-07T00:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>The algorithm is simple but it is a pain in the ass to parse input and extract names.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Person &#123;</div><div class="line">  <span class="keyword">int</span> size;</div><div class="line">  <span class="built_in">vector</span>&lt;Person*&gt; toList;</div><div class="line">  <span class="keyword">int</span> money;</div><div class="line">  <span class="keyword">int</span> left;</div><div class="line">  <span class="keyword">int</span> sum;</div><div class="line">  <span class="built_in">string</span> name;</div><div class="line"></div><div class="line">  Person(<span class="built_in">string</span> name) : size(<span class="number">0</span>), money(<span class="number">0</span>), left(<span class="number">0</span>), name(name) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span> <span class="params">(<span class="string">"gift1.out"</span>)</span></span>;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span> <span class="params">(<span class="string">"gift1.in"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">string</span> input;</div><div class="line">  getline(fin, input);</div><div class="line">  <span class="keyword">int</span> total = stoi(input);</div><div class="line"></div><div class="line">  <span class="comment">// Each line contains the name of a group member</span></div><div class="line">  <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, Person*&gt; hashmap;</div><div class="line">  <span class="built_in">vector</span>&lt;Person*&gt; personList;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; ++i) &#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    getline(fin, name);</div><div class="line">    <span class="keyword">auto</span> person = <span class="keyword">new</span> Person(name);</div><div class="line">    hashmap[name] = person;</div><div class="line">    personList.push_back(person);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">   The first line in the group tells the person's name who will be giving gifts.</div><div class="line">   The second line in the group contains two numbers: The initial amount of money (in the range 0..2000) to be divided up into gifts by the giver and then the number of people to whom the giver will give gifts, NGi (0 ≤ NGi ≤ NP-1).</div><div class="line">   If NGi is nonzero, each of the next NGi lines lists the the name of a recipient of a gift.</div><div class="line">   */</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; ++i) &#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    getline(fin, name);</div><div class="line">    <span class="keyword">auto</span> person = hashmap[name];</div><div class="line"></div><div class="line">    fin &gt;&gt; person-&gt;money &gt;&gt; person-&gt;size;</div><div class="line">    <span class="built_in">string</span> newline;</div><div class="line">    getline(fin, newline);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!person-&gt;size)</div><div class="line">      person-&gt;left = person-&gt;money;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (person-&gt;size == <span class="number">1</span>)</div><div class="line">      person-&gt;left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      person-&gt;left = person-&gt;money % person-&gt;size;</div><div class="line"></div><div class="line">    person-&gt;sum = person-&gt;left;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (person-&gt;size) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; person-&gt;size; ++j) &#123;</div><div class="line">        <span class="built_in">string</span> toName;</div><div class="line">        getline(fin, toName);</div><div class="line">        person-&gt;toList.push_back(hashmap[toName]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;item : hashmap) &#123;</div><div class="line">    <span class="keyword">if</span> (!item.second-&gt;size) <span class="keyword">continue</span>;</div><div class="line">    <span class="keyword">int</span> money = (item.second-&gt;money - item.second-&gt;left) / item.second-&gt;size;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;toPerson : item.second-&gt;toList) &#123;</div><div class="line">      toPerson-&gt;sum += money;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;person : personList) &#123;</div><div class="line">    fout &lt;&lt; person-&gt;name &lt;&lt; <span class="string">" "</span> &lt;&lt; person-&gt;sum - person-&gt;money &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The algorithm is simple but it is a pain in the ass to parse input and extract names.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.1 - Your Ride Is Here</title>
    <link href="http://lianghan.org/2016/08/06/2016-08-06-USACO-YourRideIsHere/"/>
    <id>http://lianghan.org/2016/08/06/2016-08-06-USACO-YourRideIsHere/</id>
    <published>2016-08-06T17:19:31.000Z</published>
    <updated>2016-08-07T00:16:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>The easiest problem in USACO training.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"ride.out"</span>)</span></span>;</div><div class="line">  <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"ride.in"</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="built_in">string</span> comet, group;</div><div class="line">  getline(fin, comet);</div><div class="line">  getline(fin, group);</div><div class="line"></div><div class="line">  <span class="keyword">long</span> <span class="keyword">long</span> valComet = <span class="number">1</span>;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">long</span> valGroup = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : comet)</div><div class="line">    valComet *= (c - <span class="string">'A'</span> + <span class="number">1</span>);</div><div class="line">  valComet %= <span class="number">47</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : group)</div><div class="line">    valGroup *= (c - <span class="string">'A'</span> + <span class="number">1</span>);</div><div class="line">  valGroup %= <span class="number">47</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (valComet == valGroup)</div><div class="line">    fout &lt;&lt; <span class="string">"GO"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    fout &lt;&lt; <span class="string">"STAY"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The easiest problem in USACO training.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;
    
    </summary>
    
      <category term="USACO" scheme="http://lianghan.org/categories/USACO/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>A C++ implementation of DijKstra Algorithm</title>
    <link href="http://lianghan.org/2016/08/03/2016-08-03-DijKstra/"/>
    <id>http://lianghan.org/2016/08/03/2016-08-03-DijKstra/</id>
    <published>2016-08-04T04:40:31.000Z</published>
    <updated>2016-08-06T22:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>DijKstra is a very useful algorithm used in graph search for finding single source shortest path. Devils are in details, here is a caninocal implementation of the algorithm in C++.</p>
<p>Like many graph problems, figure out the data structure and the representation of the graph is critical to the implementation of algorithm. Here we use graph’s object-pointer representation which naturally encodes both node relationships and edge weights.</p>
<p>To be able to reconstruct the shortest path we need to keep a vector that stores the ‘previous’ relationship for each vertice while we are figuring out the shortest path.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif" alt="Dijkstra_Animation"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">// [to node index, edge weight] pair.</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; edge;</div><div class="line"><span class="comment">// [node index, distance to source] pair.</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; element;</div><div class="line"><span class="keyword">class</span> compare &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> element&amp;a, <span class="keyword">const</span> element &amp;b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.second &gt; b.second;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;edge&gt;&gt; &amp;graph, <span class="keyword">int</span> source, <span class="keyword">int</span> target,</span></span></div><div class="line">             <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path) &#123;</div><div class="line">  <span class="keyword">int</span> size = (<span class="keyword">int</span>)graph.size();</div><div class="line">  <span class="keyword">if</span> (!size) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  <span class="keyword">if</span> (source &lt; <span class="number">0</span> || source &gt;= size || target &lt; <span class="number">0</span> || target &gt;= size)</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visited(size, <span class="literal">false</span>);</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; distance(size, INT_MAX);</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prev(size, <span class="number">-1</span>);</div><div class="line">  path = prev;</div><div class="line">  distance[source] = <span class="number">0</span>;</div><div class="line"></div><div class="line">  priority_queue&lt;element, <span class="built_in">vector</span>&lt;element&gt;, compare&gt; pq;</div><div class="line">  pq.emplace(make_pair(source, <span class="number">0</span>));</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (!pq.empty()) &#123;</div><div class="line">    <span class="keyword">int</span> v = pq.top().first;</div><div class="line">    pq.pop();</div><div class="line">    <span class="keyword">if</span> (v == target) <span class="keyword">return</span> distance[v];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (visited[v]) <span class="keyword">continue</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : graph[v]) &#123;</div><div class="line">      <span class="keyword">int</span> u = edge.first; <span class="comment">// vertice u that connects to v.</span></div><div class="line">      <span class="keyword">int</span> w = edge.second; <span class="comment">// weight of edge that connects u and v.</span></div><div class="line">      <span class="keyword">if</span> (visited[u]) <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">if</span> (distance[v] + w &lt; distance[u]) &#123;</div><div class="line">        distance[u] = distance[v] + w;</div><div class="line">        pq.emplace(make_pair(u, distance[u]));</div><div class="line">        path[u] = v;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    visited[v] = <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;edge&gt;&gt; graph(<span class="number">7</span>, <span class="built_in">vector</span>&lt;edge&gt;());</div><div class="line">  graph[<span class="number">1</span>].push_back(make_pair(<span class="number">3</span>, <span class="number">9</span>));</div><div class="line">  graph[<span class="number">1</span>].push_back(make_pair(<span class="number">2</span>, <span class="number">7</span>));</div><div class="line">  graph[<span class="number">1</span>].push_back(make_pair(<span class="number">6</span>, <span class="number">14</span>));</div><div class="line">  graph[<span class="number">2</span>].push_back(make_pair(<span class="number">1</span>, <span class="number">7</span>));</div><div class="line">  graph[<span class="number">2</span>].push_back(make_pair(<span class="number">3</span>, <span class="number">10</span>));</div><div class="line">  graph[<span class="number">2</span>].push_back(make_pair(<span class="number">4</span>, <span class="number">15</span>));</div><div class="line">  graph[<span class="number">3</span>].push_back(make_pair(<span class="number">1</span>, <span class="number">9</span>));</div><div class="line">  graph[<span class="number">3</span>].push_back(make_pair(<span class="number">6</span>, <span class="number">2</span>));</div><div class="line">  graph[<span class="number">3</span>].push_back(make_pair(<span class="number">4</span>, <span class="number">11</span>));</div><div class="line">  graph[<span class="number">4</span>].push_back(make_pair(<span class="number">2</span>, <span class="number">15</span>));</div><div class="line">  graph[<span class="number">4</span>].push_back(make_pair(<span class="number">3</span>, <span class="number">11</span>));</div><div class="line">  graph[<span class="number">4</span>].push_back(make_pair(<span class="number">5</span>, <span class="number">6</span>));</div><div class="line">  graph[<span class="number">5</span>].push_back(make_pair(<span class="number">6</span>, <span class="number">9</span>));</div><div class="line">  graph[<span class="number">5</span>].push_back(make_pair(<span class="number">4</span>, <span class="number">6</span>));</div><div class="line">  graph[<span class="number">6</span>].push_back(make_pair(<span class="number">1</span>, <span class="number">14</span>));</div><div class="line">  graph[<span class="number">6</span>].push_back(make_pair(<span class="number">3</span>, <span class="number">2</span>));</div><div class="line">  graph[<span class="number">6</span>].push_back(make_pair(<span class="number">5</span>, <span class="number">9</span>));</div><div class="line"></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre;</div><div class="line">  <span class="keyword">int</span> shortestPath = dijkstra(graph, <span class="number">1</span>, <span class="number">5</span>, pre);</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Shortest path from 1 to 5 has length of "</span> &lt;&lt; shortestPath &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Construct shortest path.</span></div><div class="line">  <span class="keyword">int</span> u = <span class="number">5</span>;</div><div class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">  <span class="keyword">while</span> (pre[u] != <span class="number">-1</span>) &#123;</div><div class="line">    path.push(u);</div><div class="line">    u = pre[u];</div><div class="line">  &#125;</div><div class="line">  path.push(u);</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (!path.empty()) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; path.top() &lt;&lt; <span class="string">" "</span>;</div><div class="line">    path.pop();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      A C++ implementation of DijKstra Algorithm
    
    </summary>
    
      <category term="TopCoder" scheme="http://lianghan.org/categories/TopCoder/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="DijKstra" scheme="http://lianghan.org/tags/DijKstra/"/>
    
  </entry>
  
  <entry>
    <title>SRM 181 DIV-1 1000 KiloManX</title>
    <link href="http://lianghan.org/2016/07/31/2016-7-31-KiloManX/"/>
    <id>http://lianghan.org/2016/07/31/2016-7-31-KiloManX/</id>
    <published>2016-08-01T04:57:31.000Z</published>
    <updated>2016-08-06T22:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://community.topcoder.com/stat?c=problem_statement&amp;pm=2288&amp;rd=4725" target="_blank" rel="external">Problem Statement</a></p>
<p>This is another very interesting problem that can be solved using graph search. The problem itself looks<br>like an optimization problem and should be solvable using ‘traditional’ dynamic programming technique (which<br>is true), but with some observations we can turn this into a graph search problem:</p>
<ul>
<li>The problem can be reduced to a search problem.</li>
<li>The search space is the set of states where each state is a combination of ‘boss defeated so far’ and ‘shots used’.</li>
<li>For each boss, the state of ‘defeated’ equals to the presence of its weapon.</li>
<li>The state transfer function looks like: given the set of boss defeated and the shots taken, what would be the set of bosses<br>that we could defeat next and the corresponding shots we would use to defeat those boss?</li>
<li>So we represent each state as a node in a graph and the state transfer function as edges between graph nodes.</li>
<li>The problem now is reduced to find shortest path between two nodes: the start node where no boss is defeated and the end<br>node where all bosses have been defeated.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> GNode &#123;</div><div class="line">    <span class="keyword">int</span> weapon;</div><div class="line">    <span class="keyword">int</span> shot;</div><div class="line">    GNode() : weapon(<span class="number">0</span>), shot(<span class="number">0</span>) &#123;&#125;</div><div class="line">&#125; node;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Compare &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> GNode &amp;n1, <span class="keyword">const</span> GNode &amp;n2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> n1.shot &gt; n2.shot;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> KiloManX &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leastShots</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; damageChart, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bossHealth)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> N = (<span class="keyword">int</span>)damageChart.size();</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> CAP = <span class="number">1</span> &lt;&lt; N;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visited(CAP, <span class="literal">false</span>);</div><div class="line">        GNode node;</div><div class="line">        priority_queue&lt;GNode, <span class="built_in">vector</span>&lt;GNode&gt;, Compare&gt; pq;</div><div class="line">        pq.push(node);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = INT_MAX;</div><div class="line">        <span class="keyword">while</span> (!pq.empty()) &#123;</div><div class="line">            <span class="keyword">auto</span> node = pq.top();</div><div class="line">            pq.pop();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (visited[node.weapon])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            visited[node.weapon] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (node.weapon == CAP - <span class="number">1</span>) &#123;</div><div class="line">                ret = min(ret, node.shot);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">                <span class="keyword">if</span> ((node.weapon &gt;&gt; i) &amp; <span class="number">1</span>)</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> best = bossHealth[i];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</div><div class="line">                    <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">if</span> (((node.weapon &gt;&gt; j) &amp; <span class="number">1</span>) &amp;&amp; damageChart[j][i] != <span class="string">'0'</span>) &#123;</div><div class="line">                        <span class="keyword">int</span> damage = damageChart[j][i] - <span class="string">'0'</span>;</div><div class="line">                        <span class="keyword">int</span> shot = bossHealth[i] / damage;</div><div class="line">                        <span class="keyword">if</span> (bossHealth[i] % damage)</div><div class="line">                            ++shot;</div><div class="line">                        best = min(best, shot);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                GNode newNode;</div><div class="line">                newNode.shot = best + node.shot;</div><div class="line">                newNode.weapon = (node.weapon | (<span class="number">1</span> &lt;&lt; i));</div><div class="line">                pq.push(newNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=2288&amp;amp;rd=4725&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Problem Statemen
    
    </summary>
    
      <category term="TopCoder" scheme="http://lianghan.org/categories/TopCoder/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="TopCoder" scheme="http://lianghan.org/tags/TopCoder/"/>
    
      <category term="BFS" scheme="http://lianghan.org/tags/BFS/"/>
    
      <category term="Graph" scheme="http://lianghan.org/tags/Graph/"/>
    
      <category term="Dijkstra" scheme="http://lianghan.org/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>SRM 211 DIV-1 500 grafixMask</title>
    <link href="http://lianghan.org/2016/07/23/2016-7-23-GrafixMask/"/>
    <id>http://lianghan.org/2016/07/23/2016-7-23-GrafixMask/</id>
    <published>2016-07-23T21:40:31.000Z</published>
    <updated>2016-08-06T22:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://community.topcoder.com/tc?module=ProblemDetail&amp;rd=5857&amp;pm=2998" target="_blank" rel="external">Problem Statement</a></p>
<p>This is a typical problem that is easily solvable using Flood Fill / BFS / DFS. The first challenge is to digest the problem quickly, and implement the code to parse input and extract interested information (in this case, the graph representation.). The second challenge is to to make sure only visit a node once.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parseString(<span class="built_in">string</span> input) &#123;</div><div class="line">  <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(input)</span></span>;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tokens&#123;istream_iterator&lt;<span class="built_in">string</span>&gt;&#123;iss&#125;,</div><div class="line">    istream_iterator&lt;<span class="built_in">string</span>&gt;&#123;&#125;&#125;;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;str : tokens) &#123;</div><div class="line">    ret.emplace_back(stoi(str));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> grafixMask &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; sortedAreas(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; rectangles) &#123;</div><div class="line">      <span class="keyword">const</span> <span class="keyword">int</span> ROWS = <span class="number">400</span>, COLS = <span class="number">600</span>;</div><div class="line">      <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; bitmap(ROWS, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(COLS, <span class="literal">false</span>));</div><div class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;rec : rectangles) &#123;</div><div class="line">        <span class="keyword">auto</span> vec = parseString(rec);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = vec[<span class="number">0</span>]; i &lt;= vec[<span class="number">2</span>]; ++i) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = vec[<span class="number">1</span>]; j &lt;= vec[<span class="number">3</span>]; ++j) &#123;</div><div class="line">            bitmap[i][j] = <span class="literal">true</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COLS; ++j) &#123;</div><div class="line">          <span class="keyword">if</span> (bitmap[i][j]) <span class="keyword">continue</span>;</div><div class="line">          <span class="keyword">int</span> area = <span class="number">0</span>;</div><div class="line">          <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; <span class="built_in">stack</span>;</div><div class="line">          <span class="built_in">stack</span>.push(make_pair(i, j));</div><div class="line"></div><div class="line">          <span class="keyword">while</span> (!<span class="built_in">stack</span>.empty()) &#123;</div><div class="line">            <span class="keyword">auto</span> pos = <span class="built_in">stack</span>.top();</div><div class="line">            <span class="built_in">stack</span>.pop();</div><div class="line">            <span class="keyword">int</span> x = pos.first, y = pos.second;</div><div class="line">            <span class="keyword">if</span> (bitmap[x][y]) <span class="keyword">continue</span>;</div><div class="line">            bitmap[x][y] = <span class="literal">true</span>;</div><div class="line">            ++area;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> dirx[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">            <span class="keyword">int</span> diry[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</div><div class="line">              <span class="keyword">int</span> xx = x + dirx[k], yy = y + diry[k];</div><div class="line">              <span class="keyword">if</span> (xx &gt;= <span class="number">0</span> &amp;&amp; xx &lt; <span class="number">400</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; yy &lt; <span class="number">600</span> &amp;&amp; !bitmap[xx][yy]) &#123;</div><div class="line">                <span class="built_in">stack</span>.push(make_pair(xx, yy));</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          ret.push_back(area);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      sort(ret.begin(), ret.end());</div><div class="line">      <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://community.topcoder.com/tc?module=ProblemDetail&amp;amp;rd=5857&amp;amp;pm=2998&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Problem Statement
    
    </summary>
    
      <category term="TopCoder" scheme="http://lianghan.org/categories/TopCoder/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="TopCoder" scheme="http://lianghan.org/tags/TopCoder/"/>
    
      <category term="BFS" scheme="http://lianghan.org/tags/BFS/"/>
    
      <category term="DFS" scheme="http://lianghan.org/tags/DFS/"/>
    
      <category term="Graph" scheme="http://lianghan.org/tags/Graph/"/>
    
      <category term="Flood Fill" scheme="http://lianghan.org/tags/Flood-Fill/"/>
    
  </entry>
  
  <entry>
    <title>SRM 156 DIV-1 1000 Path Finding</title>
    <link href="http://lianghan.org/2016/07/20/2016-7-20-PathFinding/"/>
    <id>http://lianghan.org/2016/07/20/2016-7-20-PathFinding/</id>
    <published>2016-07-20T17:39:31.000Z</published>
    <updated>2016-08-06T22:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://community.topcoder.com/stat?c=problem_statement&amp;pm=1110" target="_blank" rel="external">Problem Statement</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="keyword">class</span> PathFinding &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">minTurns</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; board)</span> </span>&#123;</div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> state &#123;</div><div class="line">      <span class="keyword">int</span> ax, ay, bx, by;</div><div class="line">      <span class="keyword">int</span> step;</div><div class="line">    &#125; state;</div><div class="line"></div><div class="line">    state s;</div><div class="line">    s.ax = s.ay = s.bx = s.by = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">bool</span> visited[<span class="number">20</span>][<span class="number">20</span>][<span class="number">20</span>][<span class="number">20</span>] = &#123;<span class="literal">false</span>&#125;;</div><div class="line">    <span class="keyword">int</span> rows = board.size(), cols = board[<span class="number">0</span>].size();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; ++j) &#123;</div><div class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">'A'</span>) &#123;</div><div class="line">          s.ax = i; s.ay = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">'B'</span>) &#123;</div><div class="line">          s.bx = i; s.by = j;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Invalid board in first place.</span></div><div class="line">    <span class="keyword">if</span> (s.ax == <span class="number">-1</span> || s.bx == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    s.step = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>&lt;state&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    visited[s.ax][s.ay][s.bx][s.by] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">      state node = q.front();</div><div class="line">      q.pop();</div><div class="line">      <span class="keyword">if</span> (node.ax == s.bx &amp;&amp; node.ay == s.by &amp;&amp; node.bx == s.ax &amp;&amp;</div><div class="line">          node.by == s.ay) &#123;</div><div class="line">        <span class="keyword">return</span> node.step;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dx1 = <span class="number">-1</span>; dx1 &lt;= <span class="number">1</span>; ++dx1) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy1 = <span class="number">-1</span>; dy1 &lt;= <span class="number">1</span>; ++dy1) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> dx2 = <span class="number">-1</span>; dx2 &lt;= <span class="number">1</span>; ++dx2) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> dy2 = <span class="number">-1</span>; dy2 &lt;= <span class="number">1</span>; ++dy2) &#123;</div><div class="line">              <span class="keyword">int</span> axx = node.ax + dx1;</div><div class="line">              <span class="keyword">int</span> ayy = node.ay + dy1;</div><div class="line">              <span class="keyword">int</span> bxx = node.bx + dx2;</div><div class="line">              <span class="keyword">int</span> byy = node.by + dy2;</div><div class="line"></div><div class="line">              <span class="comment">// Out of board.</span></div><div class="line">              <span class="keyword">if</span> (axx &lt; <span class="number">0</span> || axx &gt;= rows || ayy &lt; <span class="number">0</span> || ayy &gt;= cols ||</div><div class="line">                  bxx &lt; <span class="number">0</span> || bxx &gt;= rows || byy &lt; <span class="number">0</span> || byy &gt;= cols) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (board[axx][ayy] == <span class="string">'X'</span> || board[bxx][byy] == <span class="string">'X'</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>; <span class="comment">// obstacle.</span></div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="comment">// Crossed line (both moves)</span></div><div class="line">              <span class="keyword">if</span> (axx == node.bx &amp;&amp; ayy == node.by &amp;&amp; bxx == node.ax &amp;&amp; byy == node.ay) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="comment">// Cross line (a single side move)</span></div><div class="line">              <span class="keyword">if</span> (axx == bxx &amp;&amp; ayy == byy) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (visited[axx][ayy][bxx][byy]) <span class="keyword">continue</span>;</div><div class="line">              state ns;</div><div class="line">              ns.step = node.step + <span class="number">1</span>;</div><div class="line">              ns.ax = axx, ns.ay = ayy, ns.bx = bxx, ns.by = byy;</div><div class="line">              visited[axx][ayy][bxx][byy] = <span class="literal">true</span>;</div><div class="line">              q.push(ns);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=1110&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Problem Statement&lt;/a&gt;&lt;/p&gt;
&lt;f
    
    </summary>
    
      <category term="TopCoder" scheme="http://lianghan.org/categories/TopCoder/"/>
    
    
      <category term="Algorithm" scheme="http://lianghan.org/tags/Algorithm/"/>
    
      <category term="TopCoder" scheme="http://lianghan.org/tags/TopCoder/"/>
    
      <category term="BFS" scheme="http://lianghan.org/tags/BFS/"/>
    
  </entry>
  
</feed>
